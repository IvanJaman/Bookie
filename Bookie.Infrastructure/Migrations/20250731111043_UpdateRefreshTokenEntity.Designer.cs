// <auto-generated />
using System;
using Bookie.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bookie.Infrastructure.Migrations
{
    [DbContext(typeof(BookieDbContext))]
    [Migration("20250731111043_UpdateRefreshTokenEntity")]
    partial class UpdateRefreshTokenEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bookie.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<string>("Blurb")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverPhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<string>("GetBookUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            Author = "Mary Shelley",
                            AverageRating = 4.5,
                            Blurb = "A classic tale of science and horror.",
                            CoverPhotoUrl = "https://ia600100.us.archive.org/view_archive.php?archive=/5/items/l_covers_0012/l_covers_0012_75.zip&file=0012752093-L.jpg",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = new Guid("77777777-7777-7777-7777-777777777777"),
                            GenreId = new Guid("88888888-8888-8888-8888-888888888888"),
                            GetBookUrl = "https://www.gutenberg.org/files/84/84-h/84-h.htm",
                            ISBN = "9780143131847",
                            Language = "English",
                            PageCount = 280,
                            PublicationYear = 1818,
                            Title = "Frankenstein"
                        });
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("Bookie.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            BookId = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 5,
                            Text = "An amazing read!",
                            UserId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            BookId = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 4,
                            Text = "Very well written, but a bit slow in the middle.",
                            UserId = new Guid("66666666-6666-6666-6666-666666666666")
                        });
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Publisher"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Shelf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Shelves");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.ShelfBook", b =>
                {
                    b.Property<Guid>("ShelfId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ShelfId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("ShelfBooks");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Bio = "I am the admin",
                            Email = "admin@bookie.com",
                            PasswordHash = "$2a$12$4B7JV2SARmlaWaPbE.rwp.av/sype46qlFOt5Jy2g4EXZpuzmrsGi",
                            RoleId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Bio = "I love books",
                            Email = "reader1@bookie.com",
                            PasswordHash = "$2a$12$4B7JV2SARmlaWaPbE.rwp.av/sype46qlFOt5Jy2g4EXZpuzmrsGi",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Username = "reader1"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Bio = "Avid book collector",
                            Email = "reader2@bookie.com",
                            PasswordHash = "$2a$12$4B7JV2SARmlaWaPbE.rwp.av/sype46qlFOt5Jy2g4EXZpuzmrsGi",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Username = "reader2"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Bio = "I publish books",
                            Email = "publisher@bookie.com",
                            PasswordHash = "$2a$12$4B7JV2SARmlaWaPbE.rwp.av/sype46qlFOt5Jy2g4EXZpuzmrsGi",
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Username = "pub1"
                        });
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Book", b =>
                {
                    b.HasOne("Bookie.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookie.Domain.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Bookie.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Review", b =>
                {
                    b.HasOne("Bookie.Domain.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookie.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Shelf", b =>
                {
                    b.HasOne("Bookie.Domain.Entities.User", "User")
                        .WithMany("Shelves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.ShelfBook", b =>
                {
                    b.HasOne("Bookie.Domain.Entities.Book", "Book")
                        .WithMany("ShelfBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookie.Domain.Entities.Shelf", "Shelf")
                        .WithMany("ShelfBooks")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.User", b =>
                {
                    b.HasOne("Bookie.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Book", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("ShelfBooks");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.Shelf", b =>
                {
                    b.Navigation("ShelfBooks");
                });

            modelBuilder.Entity("Bookie.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviews");

                    b.Navigation("Shelves");
                });
#pragma warning restore 612, 618
        }
    }
}
